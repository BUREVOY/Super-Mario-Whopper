"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface GameStatsProps {
  className?: string;
}

interface Stats {
  gamesPlayed: number;
  highScore: number;
  totalScore: number;
  enemiesDefeated: number;
  powerUpsCollected: number;
  timePlayedMinutes: number;
  achievements: Achievement[];
}

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  unlocked: boolean;
  unlockedAt?: Date;
}

const ACHIEVEMENTS: Achievement[] = [
  {
    id: "first_game",
    name: "–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞",
    description: "–°—ã–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É",
    icon: "üéÆ",
    unlocked: false,
  },
  {
    id: "score_1000",
    name: "–¢—ã—Å—è—á–Ω–∏–∫",
    description: "–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –æ—á–∫–æ–≤",
    icon: "üèÜ",
    unlocked: false,
  },
  {
    id: "enemy_hunter",
    name: "–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ —Ñ–∞—Å—Ç—Ñ—É–¥",
    description: "–ü–æ–±–µ–¥–∏—Ç–µ 50 –≤—Ä–∞–≥–æ–≤",
    icon: "üçî",
    unlocked: false,
  },
  {
    id: "power_collector",
    name: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –±–æ–Ω—É—Å–æ–≤",
    description: "–°–æ–±–µ—Ä–∏—Ç–µ 25 –±–æ–Ω—É—Å–æ–≤",
    icon: "üëë",
    unlocked: false,
  },
  {
    id: "time_master",
    name: "–ú–∞—Å—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏",
    description: "–ò–≥—Ä–∞–π—Ç–µ 30 –º–∏–Ω—É—Ç",
    icon: "‚è∞",
    unlocked: false,
  },
  {
    id: "high_scorer",
    name: "–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω",
    description: "–ù–∞–±–µ—Ä–∏—Ç–µ 5000 –æ—á–∫–æ–≤",
    icon: "üåü",
    unlocked: false,
  },
];

export default function GameStats({ className = "" }: GameStatsProps) {
  const [stats, setStats] = useState<Stats>({
    gamesPlayed: 0,
    highScore: 0,
    totalScore: 0,
    enemiesDefeated: 0,
    powerUpsCollected: 0,
    timePlayedMinutes: 0,
    achievements: ACHIEVEMENTS,
  });

  const [isVisible, setIsVisible] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
  useEffect(() => {
    const savedStats = localStorage.getItem("super_mario_whopper_stats");
    if (savedStats) {
      try {
        const parsedStats = JSON.parse(savedStats);
        setStats((prevStats) => ({
          ...prevStats,
          ...parsedStats,
          achievements: ACHIEVEMENTS.map((achievement) => {
            const saved = parsedStats.achievements?.find(
              (a: Achievement) => a.id === achievement.id
            );
            return saved ? { ...achievement, ...saved } : achievement;
          }),
        }));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
  const saveStats = (newStats: Stats) => {
    localStorage.setItem("super_mario_whopper_stats", JSON.stringify(newStats));
    setStats(newStats);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const checkAchievements = (newStats: Stats) => {
    const updatedAchievements = newStats.achievements.map((achievement) => {
      if (achievement.unlocked) return achievement;

      let shouldUnlock = false;
      switch (achievement.id) {
        case "first_game":
          shouldUnlock = newStats.gamesPlayed >= 1;
          break;
        case "score_1000":
          shouldUnlock = newStats.highScore >= 1000;
          break;
        case "enemy_hunter":
          shouldUnlock = newStats.enemiesDefeated >= 50;
          break;
        case "power_collector":
          shouldUnlock = newStats.powerUpsCollected >= 25;
          break;
        case "time_master":
          shouldUnlock = newStats.timePlayedMinutes >= 30;
          break;
        case "high_scorer":
          shouldUnlock = newStats.highScore >= 5000;
          break;
      }

      if (shouldUnlock) {
        return {
          ...achievement,
          unlocked: true,
          unlockedAt: new Date(),
        };
      }

      return achievement;
    });

    return { ...newStats, achievements: updatedAchievements };
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∏–≥—Ä—ã)
  const updateStats = (gameStats: Partial<Stats>) => {
    const newStats = checkAchievements({
      ...stats,
      ...gameStats,
    });
    saveStats(newStats);
  };

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–≥—Ä–µ
  (
    window as unknown as { updateGameStats?: typeof updateStats }
  ).updateGameStats = updateStats;

  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const resetStats = () => {
    const resetStats: Stats = {
      gamesPlayed: 0,
      highScore: 0,
      totalScore: 0,
      enemiesDefeated: 0,
      powerUpsCollected: 0,
      timePlayedMinutes: 0,
      achievements: ACHIEVEMENTS,
    };
    saveStats(resetStats);
  };

  const unlockedAchievements = stats.achievements.filter((a) => a.unlocked);
  const achievementProgress =
    (unlockedAchievements.length / ACHIEVEMENTS.length) * 100;

  return (
    <div className={`space-y-6 ${className}`}>
      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É */}
      <div className="text-center">
        <button
          onClick={() => setIsVisible(!isVisible)}
          className="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-bold transition-colors"
        >
          {isVisible ? "üìä –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" : "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}
        </button>
      </div>

      {isVisible && (
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center text-red-800">
                üìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between">
                <span>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:</span>
                <Badge variant="secondary">{stats.gamesPlayed}</Badge>
              </div>
              <div className="flex justify-between">
                <span>–†–µ–∫–æ—Ä–¥ –æ—á–∫–æ–≤:</span>
                <Badge variant="default">
                  {stats.highScore.toLocaleString()}
                </Badge>
              </div>
              <div className="flex justify-between">
                <span>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</span>
                <Badge variant="outline">
                  {stats.totalScore.toLocaleString()}
                </Badge>
              </div>
              <div className="flex justify-between">
                <span>–í—Ä–µ–º—è –∏–≥—Ä—ã:</span>
                <Badge variant="secondary">{stats.timePlayedMinutes} –º–∏–Ω</Badge>
              </div>
            </CardContent>
          </Card>

          {/* –ë–æ–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center text-red-800">
                ‚öîÔ∏è –ë–æ–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between">
                <span>–í—Ä–∞–≥–æ–≤ –ø–æ–±–µ–∂–¥–µ–Ω–æ:</span>
                <Badge variant="destructive">{stats.enemiesDefeated}</Badge>
              </div>
              <div className="flex justify-between">
                <span>–ë–æ–Ω—É—Å–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:</span>
                <Badge variant="default">{stats.powerUpsCollected}</Badge>
              </div>
              <div className="flex justify-between">
                <span>–°—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç:</span>
                <Badge variant="outline">
                  {stats.gamesPlayed > 0
                    ? Math.round(stats.totalScore / stats.gamesPlayed)
                    : 0}
                </Badge>
              </div>
            </CardContent>
          </Card>

          {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
          <Card className="md:col-span-2 lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-red-800">
                üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                <Badge variant="outline">
                  {unlockedAchievements.length}/{ACHIEVEMENTS.length}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <div className="flex justify-between text-sm mb-1">
                  <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                  <span>{Math.round(achievementProgress)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-red-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${achievementProgress}%` }}
                  />
                </div>
              </div>

              <div className="space-y-2 max-h-48 overflow-y-auto">
                {stats.achievements.map((achievement) => (
                  <div
                    key={achievement.id}
                    className={`flex items-center p-2 rounded ${
                      achievement.unlocked
                        ? "bg-green-100 border border-green-300"
                        : "bg-gray-100 border border-gray-300"
                    }`}
                  >
                    <span className="text-2xl mr-3">{achievement.icon}</span>
                    <div className="flex-1">
                      <div
                        className={`font-semibold ${
                          achievement.unlocked
                            ? "text-green-800"
                            : "text-gray-600"
                        }`}
                      >
                        {achievement.name}
                      </div>
                      <div className="text-sm text-gray-600">
                        {achievement.description}
                      </div>
                      {achievement.unlocked && achievement.unlockedAt && (
                        <div className="text-xs text-green-600">
                          –ü–æ–ª—É—á–µ–Ω–æ:{" "}
                          {new Date(
                            achievement.unlockedAt
                          ).toLocaleDateString()}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      {isVisible && (
        <div className="text-center">
          <button
            onClick={resetStats}
            className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded font-semibold transition-colors"
          >
            üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          </button>
        </div>
      )}
    </div>
  );
}
