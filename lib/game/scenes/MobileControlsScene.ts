import * as Phaser from "phaser";
import { SCENES, COLORS } from "../../constants";

export class MobileControlsScene extends Phaser.Scene {
  private leftButton!: Phaser.GameObjects.Graphics;
  private rightButton!: Phaser.GameObjects.Graphics;
  private jumpButton!: Phaser.GameObjects.Graphics;
  private pauseButton!: Phaser.GameObjects.Graphics;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏
  private jumpIcon!: Phaser.GameObjects.Text;
  private pauseIcon!: Phaser.GameObjects.Text;

  private leftPressed: boolean = false;
  private rightPressed: boolean = false;
  private jumpPressed: boolean = false;

  // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∂–æ–π—Å—Ç–∏–∫
  private joystickBase!: Phaser.GameObjects.Graphics;
  private joystickThumb!: Phaser.GameObjects.Graphics;
  private joystickActive: boolean = false;
  private joystickDirection: { x: number; y: number } = { x: 0, y: 0 };

  // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∞–Ω–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤ resize
  private isInitialized: boolean = false;

  constructor() {
    super({ key: SCENES.MOBILE_CONTROLS });
    console.log("üéÆ MobileControlsScene: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω");
  }

  create(): void {
    console.log("üéÆ MobileControlsScene.create: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω—ã");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
    if (!this.isMobileDevice()) {
      console.log(
        "üéÆ MobileControlsScene.create: –ù–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã—Ö–æ–¥"
      );
      return; // –ù–µ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
    }

    this.createVirtualButtons();
    this.createVirtualJoystick();
    this.setupTouchEvents();

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
    if (
      this.jumpButton &&
      this.pauseButton &&
      this.joystickBase &&
      this.joystickThumb &&
      this.jumpIcon &&
      this.pauseIcon
    ) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      this.isInitialized = true;
      console.log("üéÆ MobileControlsScene: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á—Ç–æ —Å—Ü–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞
      this.events.emit("mobileControlsReady");
    } else {
      console.error("üéÆ MobileControlsScene: –ù–µ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!");
    }
  }

  private isMobileDevice(): boolean {
    const isMobile =
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        navigator.userAgent
      ) || "ontouchstart" in window;

    console.log("üéÆ MobileControlsScene.isMobileDevice:", isMobile);
    return isMobile;
  }

  private createVirtualButtons(): void {
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;
    const buttonSize = 80;
    const margin = 20;

    // –ö–Ω–æ–ø–∫–∞ –ø—Ä—ã–∂–∫–∞ (—Å–ø—Ä–∞–≤–∞)
    this.jumpButton = this.add.graphics();
    this.jumpButton.fillStyle(
      parseInt(COLORS.BK_RED.replace("#", ""), 16),
      0.7
    );
    this.jumpButton.fillCircle(0, 0, buttonSize / 2);
    this.jumpButton.lineStyle(4, parseInt(COLORS.WHITE.replace("#", ""), 16));
    this.jumpButton.strokeCircle(0, 0, buttonSize / 2);
    this.jumpButton.setPosition(
      width - buttonSize / 2 - margin,
      height - buttonSize / 2 - margin
    );
    this.jumpButton.setScrollFactor(0);
    this.jumpButton.setDepth(1000);

    // –ò–∫–æ–Ω–∫–∞ –ø—Ä—ã–∂–∫–∞
    this.jumpIcon = this.add.text(this.jumpButton.x, this.jumpButton.y, "‚Üë", {
      fontSize: "32px",
      color: COLORS.WHITE,
      fontFamily: "Arial Bold",
    });
    this.jumpIcon.setOrigin(0.5);
    this.jumpIcon.setScrollFactor(0);
    this.jumpIcon.setDepth(1001);

    // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
    this.pauseButton = this.add.graphics();
    this.pauseButton.fillStyle(
      parseInt(COLORS.BK_BROWN.replace("#", ""), 16),
      0.7
    );
    this.pauseButton.fillCircle(0, 0, 30);
    this.pauseButton.lineStyle(3, parseInt(COLORS.WHITE.replace("#", ""), 16));
    this.pauseButton.strokeCircle(0, 0, 30);
    this.pauseButton.setPosition(width - 50, 50);
    this.pauseButton.setScrollFactor(0);
    this.pauseButton.setDepth(1000);

    // –ò–∫–æ–Ω–∫–∞ –ø–∞—É–∑—ã
    this.pauseIcon = this.add.text(
      this.pauseButton.x,
      this.pauseButton.y,
      "‚è∏",
      {
        fontSize: "20px",
        color: COLORS.WHITE,
        fontFamily: "Arial Bold",
      }
    );
    this.pauseIcon.setOrigin(0.5);
    this.pauseIcon.setScrollFactor(0);
    this.pauseIcon.setDepth(1001);

    // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏
    this.jumpButton.setInteractive(
      new Phaser.Geom.Circle(0, 0, buttonSize / 2),
      Phaser.Geom.Circle.Contains
    );

    this.pauseButton.setInteractive(
      new Phaser.Geom.Circle(0, 0, 30),
      Phaser.Geom.Circle.Contains
    );
  }

  private createVirtualJoystick(): void {
    const margin = 20;
    const baseSize = 100;
    const thumbSize = 40;

    // –ë–∞–∑–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    this.joystickBase = this.add.graphics();
    this.joystickBase.fillStyle(
      parseInt(COLORS.BK_BROWN.replace("#", ""), 16),
      0.5
    );
    this.joystickBase.fillCircle(0, 0, baseSize / 2);
    this.joystickBase.lineStyle(
      4,
      parseInt(COLORS.WHITE.replace("#", ""), 16),
      0.8
    );
    this.joystickBase.strokeCircle(0, 0, baseSize / 2);
    this.joystickBase.setPosition(
      margin + baseSize / 2,
      this.cameras.main.height - margin - baseSize / 2
    );
    this.joystickBase.setScrollFactor(0);
    this.joystickBase.setDepth(1000);

    // –†—É—á–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    this.joystickThumb = this.add.graphics();
    this.joystickThumb.fillStyle(
      parseInt(COLORS.BK_YELLOW.replace("#", ""), 16),
      0.9
    );
    this.joystickThumb.fillCircle(0, 0, thumbSize / 2);
    this.joystickThumb.lineStyle(
      3,
      parseInt(COLORS.WHITE.replace("#", ""), 16)
    );
    this.joystickThumb.strokeCircle(0, 0, thumbSize / 2);
    this.joystickThumb.setPosition(this.joystickBase.x, this.joystickBase.y);
    this.joystickThumb.setScrollFactor(0);
    this.joystickThumb.setDepth(1001);

    // –î–µ–ª–∞–µ–º –¥–∂–æ–π—Å—Ç–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º
    this.joystickBase.setInteractive(
      new Phaser.Geom.Circle(0, 0, baseSize / 2),
      Phaser.Geom.Circle.Contains
    );
  }

  private setupTouchEvents(): void {
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä—ã–∂–∫–∞
    this.jumpButton.on("pointerdown", () => {
      this.jumpPressed = true;
      this.jumpButton.setAlpha(0.8);
      this.emitControlEvent("jump", true);
    });

    this.jumpButton.on("pointerup", () => {
      this.jumpPressed = false;
      this.jumpButton.setAlpha(1);
      this.emitControlEvent("jump", false);
    });

    this.jumpButton.on("pointerout", () => {
      this.jumpPressed = false;
      this.jumpButton.setAlpha(1);
      this.emitControlEvent("jump", false);
    });

    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã
    this.pauseButton.on("pointerdown", () => {
      this.pauseButton.setAlpha(0.8);
      this.emitControlEvent("pause", true);
    });

    this.pauseButton.on("pointerup", () => {
      this.pauseButton.setAlpha(1);
    });

    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∂–æ–π—Å—Ç–∏–∫–∞
    this.joystickBase.on("pointerdown", (pointer: Phaser.Input.Pointer) => {
      this.joystickActive = true;
      this.updateJoystick(pointer);
    });

    this.input.on("pointermove", (pointer: Phaser.Input.Pointer) => {
      if (this.joystickActive) {
        this.updateJoystick(pointer);
      }
    });

    this.input.on("pointerup", () => {
      if (this.joystickActive) {
        this.joystickActive = false;
        this.resetJoystick();
      }
    });
  }

  private updateJoystick(pointer: Phaser.Input.Pointer): void {
    const baseX = this.joystickBase.x;
    const baseY = this.joystickBase.y;
    const maxDistance = 40; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    const distance = Phaser.Math.Distance.Between(
      baseX,
      baseY,
      pointer.x,
      pointer.y
    );

    let thumbX = pointer.x;
    let thumbY = pointer.y;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ä—É—á–∫–∏ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    if (distance > maxDistance) {
      const angle = Phaser.Math.Angle.Between(
        baseX,
        baseY,
        pointer.x,
        pointer.y
      );
      thumbX = baseX + Math.cos(angle) * maxDistance;
      thumbY = baseY + Math.sin(angle) * maxDistance;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–∫–∏
    this.joystickThumb.setPosition(thumbX, thumbY);

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (-1 –¥–æ 1)
    this.joystickDirection.x = (thumbX - baseX) / maxDistance;
    this.joystickDirection.y = (thumbY - baseY) / maxDistance;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    const threshold = 0.3;
    this.leftPressed = this.joystickDirection.x < -threshold;
    this.rightPressed = this.joystickDirection.x > threshold;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.emitControlEvent("left", this.leftPressed);
    this.emitControlEvent("right", this.rightPressed);
  }

  private resetJoystick(): void {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—á–∫—É –≤ —Ü–µ–Ω—Ç—Ä
    this.joystickThumb.setPosition(this.joystickBase.x, this.joystickBase.y);
    this.joystickDirection = { x: 0, y: 0 };

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    this.leftPressed = false;
    this.rightPressed = false;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å–±—Ä–æ—Å–∞
    this.emitControlEvent("left", false);
    this.emitControlEvent("right", false);
  }

  private emitControlEvent(action: string, pressed: boolean): void {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∏–≥—Ä–æ–≤—É—é —Å—Ü–µ–Ω—É
    this.scene.get(SCENES.GAME)?.events.emit("mobileControl", {
      action,
      pressed,
      direction: this.joystickDirection,
    });
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  public getControlState() {
    return {
      left: this.leftPressed,
      right: this.rightPressed,
      jump: this.jumpPressed,
      direction: this.joystickDirection,
    };
  }

  public isJoystickActive(): boolean {
    return this.joystickActive;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  public resize(width: number, height: number): void {
    console.log("üéÆ MobileControlsScene.resize: –ù–∞—á–∞–ª–æ –≤—ã–∑–æ–≤–∞", {
      width,
      height,
    });

    if (!this.isMobileDevice()) {
      console.log(
        "üéÆ MobileControlsScene.resize: –ù–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã—Ö–æ–¥"
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    if (!this.isInitialized) {
      console.warn(
        "üéÆ MobileControlsScene: –ü–æ–ø—ã—Ç–∫–∞ resize –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
      );
      return;
    }

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    console.log("üéÆ MobileControlsScene.resize: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤:");
    console.log("  - jumpButton:", !!this.jumpButton);
    console.log("  - pauseButton:", !!this.pauseButton);
    console.log("  - joystickBase:", !!this.joystickBase);
    console.log("  - joystickThumb:", !!this.joystickThumb);
    console.log("  - jumpIcon:", !!this.jumpIcon);
    console.log("  - pauseIcon:", !!this.pauseIcon);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π
    if (
      !this.jumpButton ||
      !this.pauseButton ||
      !this.joystickBase ||
      !this.joystickThumb ||
      !this.jumpIcon ||
      !this.pauseIcon
    ) {
      console.warn(
        "üéÆ MobileControlsScene: –û–±—ä–µ–∫—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
      );
      return;
    }

    try {
      console.log("üéÆ MobileControlsScene.resize: –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π");

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const buttonSize = 80;
      const margin = 20;

      // –ö–Ω–æ–ø–∫–∞ –ø—Ä—ã–∂–∫–∞
      console.log("üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é jumpButton");
      this.jumpButton.setPosition(
        width - buttonSize / 2 - margin,
        height - buttonSize / 2 - margin
      );
      console.log("üéÆ jumpButton –æ–±–Ω–æ–≤–ª–µ–Ω");

      // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
      console.log("üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é pauseButton");
      this.pauseButton.setPosition(width - 50, 50);
      console.log("üéÆ pauseButton –æ–±–Ω–æ–≤–ª–µ–Ω");

      // –î–∂–æ–π—Å—Ç–∏–∫
      const baseSize = 100;
      console.log("üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é joystickBase");
      this.joystickBase.setPosition(
        margin + baseSize / 2,
        height - margin - baseSize / 2
      );
      console.log("üéÆ joystickBase –æ–±–Ω–æ–≤–ª–µ–Ω");

      console.log("üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é joystickThumb");
      this.joystickThumb.setPosition(this.joystickBase.x, this.joystickBase.y);
      console.log("üéÆ joystickThumb –æ–±–Ω–æ–≤–ª–µ–Ω");

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–∫–æ–Ω–æ–∫
      console.log("üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é jumpIcon");
      this.jumpIcon.setPosition(this.jumpButton.x, this.jumpButton.y);
      console.log("üéÆ jumpIcon –æ–±–Ω–æ–≤–ª–µ–Ω");

      console.log("üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é pauseIcon");
      this.pauseIcon.setPosition(this.pauseButton.x, this.pauseButton.y);
      console.log("üéÆ pauseIcon –æ–±–Ω–æ–≤–ª–µ–Ω");

      console.log(
        `üéÆ MobileControlsScene: –†–∞–∑–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ ${width}x${height}`
      );
    } catch (error) {
      console.error(
        "üéÆ MobileControlsScene: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:",
        error
      );
      console.error("üéÆ –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", (error as Error).stack);
    }
  }
}
