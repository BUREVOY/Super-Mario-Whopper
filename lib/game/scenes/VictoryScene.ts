import Phaser from "phaser";
import { SCENES, COLORS } from "../../constants";

export class VictoryScene extends Phaser.Scene {
  private score: number = 0;
  private level: number = 1;
  private timeBonus: number = 0;

  constructor() {
    super({ key: SCENES.VICTORY });
  }

  init(data: { score: number; level: number; timeBonus: number }): void {
    this.score = data.score || 0;
    this.level = data.level || 1;
    this.timeBonus = data.timeBonus || 0;
  }

  create(): void {
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;

    // –§–æ–Ω –≤ —Å—Ç–∏–ª–µ Burger King
    this.add.rectangle(
      width / 2,
      height / 2,
      width,
      height,
      parseInt(COLORS.BK_YELLOW.replace("#", ""), 16)
    );

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ Victory
    const victoryText = this.add.text(
      width / 2,
      height / 2 - 150,
      "–£–†–û–í–ï–ù–¨ –ü–†–û–ô–î–ï–ù!",
      {
        fontSize: "56px",
        color: COLORS.BK_RED,
        fontFamily: "Arial Black",
        stroke: COLORS.BLACK,
        strokeThickness: 4,
      }
    );
    victoryText.setOrigin(0.5);

    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    const subtitleText = this.add.text(
      width / 2,
      height / 2 - 80,
      "Whopper –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!",
      {
        fontSize: "28px",
        color: COLORS.BK_BROWN,
        fontFamily: "Arial Bold",
        stroke: COLORS.BLACK,
        strokeThickness: 2,
      }
    );
    subtitleText.setOrigin(0.5);

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç
    const scoreText = this.add.text(
      width / 2,
      height / 2 - 20,
      `–°—á–µ—Ç: ${this.score}`,
      {
        fontSize: "32px",
        color: COLORS.BK_RED,
        fontFamily: "Arial Bold",
        stroke: COLORS.BLACK,
        strokeThickness: 2,
      }
    );
    scoreText.setOrigin(0.5);

    // –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è
    const bonusText = this.add.text(
      width / 2,
      height / 2 + 20,
      `–ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è: +${this.timeBonus}`,
      {
        fontSize: "24px",
        color: COLORS.BK_BROWN,
        fontFamily: "Arial",
        stroke: COLORS.BLACK,
        strokeThickness: 2,
      }
    );
    bonusText.setOrigin(0.5);

    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
    const levelText = this.add.text(
      width / 2,
      height / 2 + 60,
      `–£—Ä–æ–≤–µ–Ω—å ${this.level} –∑–∞–≤–µ—Ä—à–µ–Ω!`,
      {
        fontSize: "20px",
        color: COLORS.BK_BROWN,
        fontFamily: "Arial",
        stroke: COLORS.BLACK,
        strokeThickness: 1,
      }
    );
    levelText.setOrigin(0.5);

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å" (–±—ã–≤—à–∞—è "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å")
    const nextLevelButton = this.add.rectangle(
      width / 2,
      height / 2 + 120,
      250,
      50,
      parseInt(COLORS.BK_RED.replace("#", ""), 16)
    );
    nextLevelButton.setStrokeStyle(
      3,
      parseInt(COLORS.BLACK.replace("#", ""), 16)
    );

    const nextLevelText = this.add.text(
      width / 2,
      height / 2 + 120,
      "–ü–†–û–ô–¢–ò –û–ü–†–û–°",
      {
        fontSize: "18px",
        color: COLORS.WHITE,
        fontFamily: "Arial Bold",
      }
    );
    nextLevelText.setOrigin(0.5);

    // –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
    const menuButton = this.add.rectangle(
      width / 2,
      height / 2 + 190,
      200,
      50,
      parseInt(COLORS.BK_BROWN.replace("#", ""), 16)
    );
    menuButton.setStrokeStyle(3, parseInt(COLORS.BLACK.replace("#", ""), 16));

    const menuText = this.add.text(
      width / 2,
      height / 2 + 190,
      "–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
      {
        fontSize: "18px",
        color: COLORS.WHITE,
        fontFamily: "Arial Bold",
      }
    );
    menuText.setOrigin(0.5);

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
    nextLevelButton.setInteractive();
    nextLevelButton.on("pointerdown", () => {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç Burger King
      this.openBurgerKingWebsite();
    });

    nextLevelButton.on("pointerover", () => {
      nextLevelButton.setFillStyle(
        parseInt(COLORS.BK_ORANGE.replace("#", ""), 16)
      );
    });

    nextLevelButton.on("pointerout", () => {
      nextLevelButton.setFillStyle(
        parseInt(COLORS.BK_RED.replace("#", ""), 16)
      );
    });

    menuButton.setInteractive();
    menuButton.on("pointerdown", () => {
      this.scene.start(SCENES.MENU);
    });

    menuButton.on("pointerover", () => {
      menuButton.setFillStyle(parseInt(COLORS.BK_ORANGE.replace("#", ""), 16));
    });

    menuButton.on("pointerout", () => {
      menuButton.setFillStyle(parseInt(COLORS.BK_BROWN.replace("#", ""), 16));
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const spaceKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.SPACE
    );
    spaceKey.on("down", () => {
      this.openBurgerKingWebsite();
    });

    const escKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.ESC
    );
    escKey.on("down", () => {
      this.scene.start(SCENES.MENU);
    });

    // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    const controlsText = this.add.text(
      width / 2,
      height - 50,
      "–ü–†–û–ë–ï–õ - –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å | ESC - –≤ –º–µ–Ω—é",
      {
        fontSize: "16px",
        color: COLORS.BK_BROWN,
        fontFamily: "Arial",
      }
    );
    controlsText.setOrigin(0.5);
    controlsText.setAlpha(0.8);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.tweens.add({
      targets: [victoryText, subtitleText],
      alpha: { from: 0, to: 1 },
      scaleX: { from: 0.5, to: 1 },
      scaleY: { from: 0.5, to: 1 },
      duration: 1000,
      ease: "Back.easeOut",
    });

    this.tweens.add({
      targets: [scoreText, bonusText, levelText],
      alpha: { from: 0, to: 1 },
      y: { from: "+=30", to: "-=30" },
      duration: 800,
      ease: "Power2",
      delay: 500,
    });

    this.tweens.add({
      targets: [nextLevelButton, nextLevelText, menuButton, menuText],
      alpha: { from: 0, to: 1 },
      scaleX: { from: 0.8, to: 1 },
      scaleY: { from: 0.8, to: 1 },
      duration: 600,
      ease: "Back.easeOut",
      delay: 1000,
    });

    // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    this.createConfetti();
  }

  private openBurgerKingWebsite(): void {
    console.log("üçî –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç Burger King...");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    const notification = this.add.rectangle(
      this.cameras.main.width / 2,
      this.cameras.main.height / 2,
      400,
      200,
      0x000000,
      0.9
    );
    notification.setStrokeStyle(
      4,
      parseInt(COLORS.BK_YELLOW.replace("#", ""), 16)
    );

    const notificationText = this.add.text(
      this.cameras.main.width / 2,
      this.cameras.main.height / 2,
      "üçî –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç\nBurger King!\n\n–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∫—É—Å–Ω—ã–µ Whopper!",
      {
        fontSize: "20px",
        color: COLORS.WHITE,
        fontFamily: "Arial Bold",
        align: "center",
      }
    );
    notificationText.setOrigin(0.5);

    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
    this.time.delayedCall(2000, () => {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç Burger King –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
      window.open(
        "https://edu.burgerkingrus.ru/view_doc.html?mode=bkpoll&getpoll=KingGuru_8_years",
        "_blank"
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      this.scene.start(SCENES.MENU);
    });
  }

  private createConfetti(): void {
    const colors = [
      parseInt(COLORS.BK_RED.replace("#", ""), 16),
      parseInt(COLORS.BK_YELLOW.replace("#", ""), 16),
      parseInt(COLORS.BK_ORANGE.replace("#", ""), 16),
    ];

    for (let i = 0; i < 50; i++) {
      const confetti = this.add.rectangle(
        Phaser.Math.Between(0, this.cameras.main.width),
        -20,
        8,
        8,
        colors[Phaser.Math.Between(0, colors.length - 1)]
      );

      this.tweens.add({
        targets: confetti,
        y: this.cameras.main.height + 20,
        x: confetti.x + Phaser.Math.Between(-100, 100),
        rotation: Phaser.Math.Between(0, 6.28),
        duration: Phaser.Math.Between(2000, 4000),
        delay: Phaser.Math.Between(0, 2000),
        onComplete: () => {
          confetti.destroy();
        },
      });
    }
  }
}
