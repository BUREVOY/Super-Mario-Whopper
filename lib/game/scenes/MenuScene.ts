import * as Phaser from "phaser";
import { SCENES, COLORS, GAME_CONFIG, VIEWPORT_UTILS } from "../../constants";

export class MenuScene extends Phaser.Scene {
  private startButton!: Phaser.GameObjects.Text;
  private instructionsButton!: Phaser.GameObjects.Text;
  private creditsButton!: Phaser.GameObjects.Text;
  private background!: Phaser.GameObjects.Rectangle;
  private logo!: Phaser.GameObjects.Text;
  private subtitle!: Phaser.GameObjects.Text;

  constructor() {
    super({ key: SCENES.MENU });
  }

  create(): void {
    console.log("üéÆ MenuScene: –°—Ü–µ–Ω–∞ –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω–∞!");
    console.log("üéÆ MenuScene: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
    const requiredTextures = ["bk_background", "player"];
    requiredTextures.forEach((key) => {
      if (this.textures.exists(key)) {
        console.log(`‚úÖ MenuScene: ${key} –¥–æ—Å—Ç—É–ø–µ–Ω`);
      } else {
        console.log(`‚ùå MenuScene: ${key} –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    });

    this.createBackground();
    this.createLogo();
    this.createMenu();
    this.createAnimations();
    this.setupInput();

    console.log("üéÆ MenuScene: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ü–µ–Ω—ã
    console.log("üéÆ MenuScene: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ü–µ–Ω—ã...");
    console.log("üéÆ MenuScene: –°—Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞:", this.scene.isActive());
    console.log("üéÆ MenuScene: –°—Ü–µ–Ω–∞ –≤–∏–¥–∏–º–∞:", this.scene.isVisible());
    console.log("üéÆ MenuScene: –ö–∞–º–µ—Ä–∞ –≤–∏–¥–∏–º–∞:", this.cameras.main.visible);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Å—Ü–µ–Ω—É –≤–∏–¥–∏–º–æ–π
    this.scene.setVisible(true);
    this.cameras.main.setVisible(true);

    console.log("üéÆ MenuScene: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å");
  }

  private createBackground(): void {
    console.log("üéÆ MenuScene: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞...");

    // –§–æ–Ω –≤ —Å—Ç–∏–ª–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ Burger King
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã —Ñ–æ–Ω–∞
    let backgroundKey = "bk_background";
    if (
      !this.textures.exists("bk_background") &&
      this.textures.exists("bk_restaurant")
    ) {
      backgroundKey = "bk_restaurant";
      console.log(
        "üéÆ MenuScene: –ò—Å–ø–æ–ª—å–∑—É–µ–º bk_restaurant –≤–º–µ—Å—Ç–æ bk_background"
      );
    }

    if (this.textures.exists(backgroundKey)) {
      this.background = this.add.rectangle(
        0,
        0,
        GAME_CONFIG.WIDTH,
        GAME_CONFIG.HEIGHT,
        0
      );
      this.background.setOrigin(0, 0);
      this.background.setDisplaySize(GAME_CONFIG.WIDTH, GAME_CONFIG.HEIGHT);
      this.background.setAlpha(0.8);
      console.log(`‚úÖ MenuScene: –§–æ–Ω ${backgroundKey} —Å–æ–∑–¥–∞–Ω`);
    } else {
      // Fallback - –ø—Ä–æ—Å—Ç–æ–π —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
      this.background = this.add.rectangle(
        GAME_CONFIG.WIDTH / 2,
        GAME_CONFIG.HEIGHT / 2,
        GAME_CONFIG.WIDTH,
        GAME_CONFIG.HEIGHT,
        parseInt(COLORS.BK_RED.replace("#", ""), 16)
      );
      console.log("‚ö†Ô∏è MenuScene: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ñ–æ–Ω");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    this.add.rectangle(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      GAME_CONFIG.WIDTH,
      GAME_CONFIG.HEIGHT,
      0x000000,
      0.4
    );

    console.log("‚úÖ MenuScene: –§–æ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
  }

  private createLogo(): void {
    console.log("üéÆ MenuScene: –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞...");

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;
    const isMobile = VIEWPORT_UTILS.isMobile();
    const isPortrait = VIEWPORT_UTILS.isPortrait();

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
    const logoSize = isMobile ? (isPortrait ? "36px" : "32px") : "64px";
    const subtitleSize = isMobile ? (isPortrait ? "18px" : "16px") : "24px";
    const logoY = isMobile ? (isPortrait ? height * 0.15 : height * 0.12) : 150;
    const subtitleY = isMobile
      ? isPortrait
        ? height * 0.22
        : height * 0.2
      : 220;
    const crownY = isMobile ? (isPortrait ? height * 0.1 : height * 0.08) : 100;
    const crownSize = isMobile ? (isPortrait ? "32px" : "28px") : "48px";

    try {
      // –ì–ª–∞–≤–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –∏–≥—Ä—ã
      this.logo = this.add.text(width / 2, logoY, "SUPER MARIO WHOPPER", {
        fontSize: logoSize,
        color: COLORS.BK_YELLOW,
        fontFamily: "Arial Black",
        stroke: COLORS.BLACK,
        strokeThickness: isMobile ? 4 : 6,
        align: "center",
      });
      this.logo.setOrigin(0.5);

      console.log("‚úÖ MenuScene: –õ–æ–≥–æ—Ç–∏–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    } catch (error) {
      console.error("‚ùå MenuScene: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞:", error);
    }

    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.subtitle = this.add.text(
      width / 2,
      subtitleY,
      "–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä –≤ —Å—Ç–∏–ª–µ Burger King",
      {
        fontSize: subtitleSize,
        color: COLORS.WHITE,
        fontFamily: "Arial",
        stroke: COLORS.BLACK,
        strokeThickness: 2,
        align: "center",
      }
    );
    this.subtitle.setOrigin(0.5);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ–Ω—É –Ω–∞–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º
    const crown = this.add.text(width / 2, crownY, "üëë", {
      fontSize: crownSize,
    });
    crown.setOrigin(0.5);
  }

  private createMenu(): void {
    console.log("üéÆ MenuScene: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é...");

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;
    const isMobile = VIEWPORT_UTILS.isMobile();
    const isPortrait = VIEWPORT_UTILS.isPortrait();

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
    const buttonSize = isMobile ? (isPortrait ? "24px" : "22px") : "32px";
    const buttonSpacing = isMobile ? (isPortrait ? 60 : 50) : 80;
    const startButtonY = isMobile
      ? isPortrait
        ? height * 0.35
        : height * 0.32
      : 320;
    const instructionsButtonY = startButtonY + buttonSpacing;
    const creditsButtonY = instructionsButtonY + buttonSpacing;
    const orderButtonY = creditsButtonY + buttonSpacing * 1.5;

    const buttonStyle = {
      fontSize: buttonSize,
      color: COLORS.WHITE,
      fontFamily: "Arial Bold",
      backgroundColor: COLORS.BK_RED,
      padding: { x: isMobile ? 15 : 20, y: isMobile ? 8 : 10 },
      stroke: COLORS.BLACK,
      strokeThickness: 2,
      align: "center",
    };

    const hoverStyle = {
      fontSize: buttonSize,
      color: COLORS.BK_YELLOW,
      fontFamily: "Arial Bold",
      backgroundColor: COLORS.BK_BROWN,
      padding: { x: isMobile ? 15 : 20, y: isMobile ? 8 : 10 },
      stroke: COLORS.BLACK,
      strokeThickness: 2,
      align: "center",
    };

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞
    const orderButtonStyle = {
      fontSize: buttonSize,
      color: COLORS.WHITE,
      fontFamily: "Arial Bold",
      backgroundColor: COLORS.BK_ORANGE,
      padding: { x: isMobile ? 15 : 20, y: isMobile ? 8 : 10 },
      stroke: COLORS.BLACK,
      strokeThickness: 2,
      align: "center",
    };

    const orderHoverStyle = {
      fontSize: buttonSize,
      color: COLORS.BK_YELLOW,
      fontFamily: "Arial Bold",
      backgroundColor: COLORS.BK_RED,
      padding: { x: isMobile ? 15 : 20, y: isMobile ? 8 : 10 },
      stroke: COLORS.BLACK,
      strokeThickness: 2,
      align: "center",
    };

    try {
      // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
      this.startButton = this.add.text(
        width / 2,
        startButtonY,
        "–ù–ê–ß–ê–¢–¨ –ò–ì–†–£",
        buttonStyle
      );
      this.startButton.setOrigin(0.5);
      this.setupButtonEvents(this.startButton, hoverStyle, buttonStyle, () =>
        this.startGame()
      );

      // –ö–Ω–æ–ø–∫–∞ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
      this.instructionsButton = this.add.text(
        width / 2,
        instructionsButtonY,
        "–ö–ê–ö –ò–ì–†–ê–¢–¨",
        buttonStyle
      );
      this.instructionsButton.setOrigin(0.5);
      this.setupButtonEvents(
        this.instructionsButton,
        hoverStyle,
        buttonStyle,
        () => this.showInstructions()
      );

      // –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç–µ–ª–∏"
      this.creditsButton = this.add.text(
        width / 2,
        creditsButtonY,
        "–û –ò–ì–†–ï",
        buttonStyle
      );
      this.creditsButton.setOrigin(0.5);
      this.setupButtonEvents(this.creditsButton, hoverStyle, buttonStyle, () =>
        this.showCredits()
      );

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å Whopper" - —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
      if (!isMobile) {
        const orderButton = this.add.text(
          width / 2,
          orderButtonY,
          "üçî –ó–ê–ö–ê–ó–ê–¢–¨ WHOPPER",
          orderButtonStyle
        );
        orderButton.setOrigin(0.5);
        this.setupButtonEvents(
          orderButton,
          orderHoverStyle,
          orderButtonStyle,
          () => this.openBurgerKingWebsite()
        );
      }

      console.log("‚úÖ MenuScene: –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
    } catch (error) {
      console.error("‚ùå MenuScene: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é:", error);
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
    const controlsText = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT - 100,
      "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ‚Üê ‚Üí –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è, ‚Üë –∏–ª–∏ –ü–†–û–ë–ï–õ –¥–ª—è –ø—Ä—ã–∂–∫–∞, P –¥–ª—è –ø–∞—É–∑—ã",
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
        stroke: COLORS.BLACK,
        strokeThickness: 1,
      }
    );
    controlsText.setOrigin(0.5);

    // –í–µ—Ä—Å–∏—è –∏–≥—Ä—ã
    const versionText = this.add.text(
      GAME_CONFIG.WIDTH - 20,
      GAME_CONFIG.HEIGHT - 20,
      "v1.0.0",
      {
        fontSize: "14px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
      }
    );
    versionText.setOrigin(1);
    versionText.setAlpha(0.7);
  }

  private setupButtonEvents(
    button: Phaser.GameObjects.Text,
    hoverStyle: Phaser.Types.GameObjects.Text.TextStyle,
    normalStyle: Phaser.Types.GameObjects.Text.TextStyle,
    callback: () => void
  ): void {
    button.on("pointerover", () => {
      button.setStyle(hoverStyle);
      this.tweens.add({
        targets: button,
        scaleX: 1.1,
        scaleY: 1.1,
        duration: 100,
        ease: "Power2",
      });
    });

    button.on("pointerout", () => {
      button.setStyle(normalStyle);
      this.tweens.add({
        targets: button,
        scaleX: 1,
        scaleY: 1,
        duration: 100,
        ease: "Power2",
      });
    });

    button.on("pointerdown", () => {
      this.tweens.add({
        targets: button,
        scaleX: 0.95,
        scaleY: 0.95,
        duration: 50,
        yoyo: true,
        ease: "Power2",
        onComplete: callback,
      });
    });
  }

  private createAnimations(): void {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
    this.tweens.add({
      targets: this.logo,
      scaleX: 1.05,
      scaleY: 1.05,
      duration: 2000,
      yoyo: true,
      repeat: -1,
      ease: "Sine.easeInOut",
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
    this.tweens.add({
      targets: this.subtitle,
      alpha: 0.7,
      duration: 1500,
      yoyo: true,
      repeat: -1,
      ease: "Sine.easeInOut",
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–∏—Ö —á–∞—Å—Ç–∏—Ü –≤ —Å—Ç–∏–ª–µ BK
    this.createFloatingParticles();
  }

  private createFloatingParticles(): void {
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã –≤ –≤–∏–¥–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BK
    const particles = ["üçî", "üçü", "ü•§", "üëë"];

    for (let i = 0; i < 10; i++) {
      const particle = this.add.text(
        Phaser.Math.Between(0, GAME_CONFIG.WIDTH),
        Phaser.Math.Between(0, GAME_CONFIG.HEIGHT),
        Phaser.Utils.Array.GetRandom(particles),
        { fontSize: "24px" }
      );
      particle.setAlpha(0.3);

      this.tweens.add({
        targets: particle,
        y: particle.y - 100,
        x: particle.x + Phaser.Math.Between(-50, 50),
        alpha: 0,
        duration: Phaser.Math.Between(3000, 6000),
        delay: Phaser.Math.Between(0, 2000),
        repeat: -1,
        onRepeat: () => {
          particle.setPosition(
            Phaser.Math.Between(0, GAME_CONFIG.WIDTH),
            GAME_CONFIG.HEIGHT + 50
          );
          particle.setAlpha(0.3);
        },
      });
    }
  }

  private setupInput(): void {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const enterKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.ENTER
    );
    enterKey.on("down", () => this.startGame());

    const escKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.ESC
    );
    escKey.on("down", () => this.showCredits());

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫
    const upKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.UP
    );
    const downKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.DOWN
    );

    let selectedButton = 0;
    const buttons = [
      this.startButton,
      this.add.text(0, 0, ""), // Placeholder –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ (–æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ)
      this.instructionsButton,
      this.creditsButton,
    ];

    upKey.on("down", () => {
      selectedButton = (selectedButton - 1 + buttons.length) % buttons.length;
      this.highlightButton(buttons, selectedButton);
    });

    downKey.on("down", () => {
      selectedButton = (selectedButton + 1) % buttons.length;
      this.highlightButton(buttons, selectedButton);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    const selectKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.SPACE
    );
    selectKey.on("down", () => {
      switch (selectedButton) {
        case 0:
          this.startGame();
          break;
        case 1:
          this.openBurgerKingWebsite();
          break;
        case 2:
          this.showInstructions();
          break;
        case 3:
          this.showCredits();
          break;
      }
    });
  }

  private highlightButton(
    buttons: Phaser.GameObjects.Text[],
    selectedIndex: number
  ): void {
    buttons.forEach((button, index) => {
      if (index === selectedIndex) {
        button.setTint(0xffff00); // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.tweens.add({
          targets: button,
          scaleX: 1.1,
          scaleY: 1.1,
          duration: 100,
        });
      } else {
        button.clearTint();
        this.tweens.add({
          targets: button,
          scaleX: 1,
          scaleY: 1,
          duration: 100,
        });
      }
    });
  }

  private startGame(): void {
    // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
    this.cameras.main.fadeOut(500, 0, 0, 0);
    this.cameras.main.once("camerafadeoutcomplete", () => {
      this.scene.start(SCENES.GAME);
    });
  }

  private showInstructions(): void {
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const modal = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      600,
      400,
      0x000000,
      0.9
    );
    modal.setStrokeStyle(4, parseInt(COLORS.BK_YELLOW.replace("#", ""), 16));

    const instructionsText = `
–ò–ù–°–¢–†–£–ö–¶–ò–ò

–¶–µ–ª—å: –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å, —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã –∏ –∏–∑–±–µ–≥–∞—è –≤—Ä–∞–≥–æ–≤

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Üê ‚Üí - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
‚Üë –∏–ª–∏ –ü–†–û–ë–ï–õ - –ü—Ä—ã–∂–æ–∫
P - –ü–∞—É–∑–∞
R - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è

–í—Ä–∞–≥–∏:
üçî –ë—É—Ä–≥–µ—Ä - –º–µ–¥–ª–µ–Ω–Ω—ã–π, –Ω–æ –∂–∏–≤—É—á–∏–π
üçü –ö–∞—Ä—Ç–æ—à–∫–∞ - –±—ã—Å—Ç—Ä–∞—è, –º–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å
ü•§ –ì–∞–∑–∏—Ä–æ–≤–∫–∞ - —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è

–ë–æ–Ω—É—Å—ã:
üëë –ö–æ—Ä–æ–Ω–∞ - –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
üçî –í–æ–ø–ø–µ—Ä - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å
üßÖ –õ—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞ - —É—Å–∫–æ—Ä–µ–Ω–∏–µ

–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    `;

    const text = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      instructionsText,
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
        align: "center",
      }
    );
    text.setOrigin(0.5);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–µ
    const closeHandler = () => {
      modal.destroy();
      text.destroy();
      this.input.keyboard!.off("keydown", closeHandler);
    };
    this.input.keyboard!.on("keydown", closeHandler);
  }

  private showCredits(): void {
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
    const modal = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      500,
      300,
      0x000000,
      0.9
    );
    modal.setStrokeStyle(4, parseInt(COLORS.BK_YELLOW.replace("#", ""), 16));

    const creditsText = `
SUPER MARIO WHOPPER

Made with love by –ê—Ä—Å–µ–Ω–∏–π –Æ–¥–∞–∫–æ–≤

–°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
‚Ä¢ Phaser 3 - –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
‚Ä¢ TypeScript - —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ Next.js - –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
‚Ä¢ shadcn/ui - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ:
‚Ä¢ Super Mario Bros
‚Ä¢ Burger King

–í–µ—Ä—Å–∏—è: 1.0.0

–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    `;

    const text = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      creditsText,
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
        align: "center",
      }
    );
    text.setOrigin(0.5);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–µ
    const closeHandler = () => {
      modal.destroy();
      text.destroy();
      this.input.keyboard!.off("keydown", closeHandler);
    };
    this.input.keyboard!.on("keydown", closeHandler);
  }

  private openBurgerKingWebsite(): void {
    console.log("üçî MenuScene: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç Burger King...");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    const modal = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      500,
      300,
      0x000000,
      0.9
    );
    modal.setStrokeStyle(4, parseInt(COLORS.BK_YELLOW.replace("#", ""), 16));

    const notificationText = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2 - 30,
      "üçî –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç Burger King!\n\nüçü –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∫—É—Å–Ω—ã–µ Whopper,\n–∫–∞—Ä—Ç–æ—à–∫—É —Ñ—Ä–∏ –∏ –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞!\n\nüëë Burger King - –í–∫—É—Å –ø—Ä–∞–≤–∏—Ç!",
      {
        fontSize: "20px",
        color: COLORS.WHITE,
        fontFamily: "Arial Bold",
        align: "center",
      }
    );
    notificationText.setOrigin(0.5);

    // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏"
    const goButton = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2 - 80,
      GAME_CONFIG.HEIGHT / 2 + 80,
      120,
      40,
      parseInt(COLORS.BK_RED.replace("#", ""), 16)
    );
    goButton.setStrokeStyle(3, parseInt(COLORS.BLACK.replace("#", ""), 16));

    const goText = this.add.text(
      GAME_CONFIG.WIDTH / 2 - 80,
      GAME_CONFIG.HEIGHT / 2 + 80,
      "–ü–ï–†–ï–ô–¢–ò",
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial Bold",
      }
    );
    goText.setOrigin(0.5);

    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    const cancelButton = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2 + 80,
      GAME_CONFIG.HEIGHT / 2 + 80,
      120,
      40,
      parseInt(COLORS.BK_BROWN.replace("#", ""), 16)
    );
    cancelButton.setStrokeStyle(3, parseInt(COLORS.BLACK.replace("#", ""), 16));

    const cancelText = this.add.text(
      GAME_CONFIG.WIDTH / 2 + 80,
      GAME_CONFIG.HEIGHT / 2 + 80,
      "–û–¢–ú–ï–ù–ê",
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial Bold",
      }
    );
    cancelText.setOrigin(0.5);

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
    goButton.setInteractive();
    goButton.on("pointerdown", () => {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç Burger King –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
      window.open(
        "https://edu.burgerkingrus.ru/view_doc.html?mode=bkpoll&getpoll=KingGuru_8_years",
        "_blank"
      );

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      modal.destroy();
      notificationText.destroy();
      goButton.destroy();
      goText.destroy();
      cancelButton.destroy();
      cancelText.destroy();
    });

    goButton.on("pointerover", () => {
      goButton.setFillStyle(parseInt(COLORS.BK_ORANGE.replace("#", ""), 16));
    });

    goButton.on("pointerout", () => {
      goButton.setFillStyle(parseInt(COLORS.BK_RED.replace("#", ""), 16));
    });

    cancelButton.setInteractive();
    cancelButton.on("pointerdown", () => {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      modal.destroy();
      notificationText.destroy();
      goButton.destroy();
      goText.destroy();
      cancelButton.destroy();
      cancelText.destroy();
    });

    cancelButton.on("pointerover", () => {
      cancelButton.setFillStyle(
        parseInt(COLORS.BK_ORANGE.replace("#", ""), 16)
      );
    });

    cancelButton.on("pointerout", () => {
      cancelButton.setFillStyle(parseInt(COLORS.BK_BROWN.replace("#", ""), 16));
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.setAlpha(0);
    notificationText.setAlpha(0);
    goButton.setAlpha(0);
    goText.setAlpha(0);
    cancelButton.setAlpha(0);
    cancelText.setAlpha(0);

    this.tweens.add({
      targets: [
        modal,
        notificationText,
        goButton,
        goText,
        cancelButton,
        cancelText,
      ],
      alpha: 1,
      duration: 300,
      ease: "Power2",
    });
  }

  private createStartButton(): void {
    const button = this.add
      .text(
        this.cameras.main.width / 2,
        this.cameras.main.height / 2 + 100,
        "üéÆ –ù–ê–ß–ê–¢–¨ –ò–ì–†–£",
        {
          fontSize: "28px",
          color: "#FFFFFF",
          backgroundColor: "#D32F2F",
          padding: { x: 20, y: 10 },
        }
      )
      .setOrigin(0.5)
      .setInteractive({ useHandCursor: true });

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
    button.on("pointerover", () => {
      this.tweens.add({
        targets: button,
        scaleX: 1.1,
        scaleY: 1.1,
        duration: 200,
        ease: "Power2",
      });

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (this.cache.audio.exists("ui_hover")) {
        this.sound.play("ui_hover", { volume: 0.3 });
      }
    });

    button.on("pointerout", () => {
      this.tweens.add({
        targets: button,
        scaleX: 1,
        scaleY: 1,
        duration: 200,
        ease: "Power2",
      });
    });

    button.on("pointerdown", () => {
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (this.cache.audio.exists("ui_click")) {
        this.sound.play("ui_click", { volume: 0.5 });
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
      this.scene.start(SCENES.GAME);
    });
  }

  private createFullscreenButton(): void {
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
    if (!this.sys.game.device.os.desktop) return;

    const fullscreenButton = this.add
      .text(
        this.cameras.main.width - 20,
        20,
        this.scale.isFullscreen ? "üì§ –í—ã–π—Ç–∏" : "üì∫ –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω",
        {
          fontSize: "16px",
          color: "#FFFFFF",
          backgroundColor: "#5D4037",
          padding: { x: 10, y: 5 },
        }
      )
      .setOrigin(1, 0)
      .setInteractive({ useHandCursor: true });

    fullscreenButton.on("pointerdown", () => {
      if (this.scale.isFullscreen) {
        this.scale.stopFullscreen();
      } else {
        this.scale.startFullscreen();
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
    this.scale.on("fullscreenchange", () => {
      fullscreenButton.setText(
        this.scale.isFullscreen ? "üì§ –í—ã–π—Ç–∏" : "üì∫ –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω"
      );
    });
  }
}
