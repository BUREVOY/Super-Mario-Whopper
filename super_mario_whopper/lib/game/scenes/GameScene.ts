import Phaser from "phaser";
import { Player } from "../Player";
import { Enemy } from "../Enemy";
import { PowerUp } from "../PowerUp";
import { GAME_CONFIG, SCENES, COLORS, SOUNDS } from "../../constants";
import { GameState, LevelConfig } from "../../../types/game";

export class GameScene extends Phaser.Scene {
  private player!: Player;
  private enemies!: Phaser.Physics.Arcade.Group;
  private powerUps!: Phaser.Physics.Arcade.Group;
  private platforms!: Phaser.Physics.Arcade.StaticGroup;

  // UI —ç–ª–µ–º–µ–Ω—Ç—ã
  private scoreText!: Phaser.GameObjects.Text;
  private livesText!: Phaser.GameObjects.Text;
  private timeText!: Phaser.GameObjects.Text;
  private levelText!: Phaser.GameObjects.Text;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  private gameState: GameState = {
    score: 0,
    lives: 3,
    level: 1,
    time: 300, // 5 –º–∏–Ω—É—Ç
    isPaused: false,
  };

  private gameTimer!: Phaser.Time.TimerEvent;

  constructor() {
    super({ key: SCENES.GAME });
  }

  create(): void {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—Å—Ç—É—Ä–∞—Ö
    console.log("üéÆ GameScene: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä:");
    const requiredTextures = [
      "player",
      "burger",
      "fries",
      "soda",
      "crown",
      "whopper",
      "onion_rings",
      "ground",
      "platform",
      "bk_restaurant",
    ];
    requiredTextures.forEach((key) => {
      if (this.textures.exists(key)) {
        console.log(`‚úÖ ${key} –¥–æ—Å—Ç—É–ø–µ–Ω`);
      } else {
        console.log(`‚ùå ${key} –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞–Ω–∏—Ü —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞
    this.physics.world.setBounds(0, 0, 3200, GAME_CONFIG.HEIGHT);

    this.createBackground();
    this.createPlatforms();
    this.createPlayer();
    this.createEnemies();
    this.createPowerUps();
    this.createFinishLine();
    this.createUI();
    this.setupPhysics();
    this.setupCamera();
    this.setupGameTimer();
    this.setupInputs();
  }

  private createBackground(): void {
    // –§–æ–Ω –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    if (this.textures.exists("bk_restaurant")) {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏
      const bgTexture = this.textures.get("bk_restaurant");
      const bgWidth = bgTexture?.source?.[0]?.width || 1024;
      const bgHeight = bgTexture?.source?.[0]?.height || 768;

      // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ–π –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
      const scale = GAME_CONFIG.HEIGHT / bgHeight;
      const scaledWidth = bgWidth * scale;

      // –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
      const numCopies = Math.ceil(3200 / scaledWidth) + 1;

      for (let i = 0; i < numCopies; i++) {
        const bg = this.add.image(i * scaledWidth, 0, "bk_restaurant");
        bg.setOrigin(0, 0);
        bg.setScale(scale);
        bg.setScrollFactor(0.3); // –õ–µ–≥–∫–∏–π –ø–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç

        // –í–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        if (bg.texture && bg.texture.source[0]) {
          const source = bg.texture.source[0] as any;
          if (source.image) {
            source.image.style.imageRendering = "auto";
          }
        }
      }
    } else {
      // Fallback - –ø—Ä–æ—Å—Ç–æ–π –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ñ–æ–Ω –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç
      const bg = this.add.rectangle(0, 0, 4000, 1000, 0x8b4513);
      bg.setOrigin(0, 0);
      bg.setScrollFactor(0);
    }
  }

  private createPlatforms(): void {
    this.platforms = this.physics.add.staticGroup();

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç—É—Ä—ã –∑–µ–º–ª–∏ —Å fallback
    const groundTexture = this.textures.get("ground");
    const groundWidth = groundTexture?.source?.[0]?.width || 64;
    const groundHeight = groundTexture?.source?.[0]?.height || 32;

    // –û—Å–Ω–æ–≤–Ω–∞—è –∑–µ–º–ª—è - —Å–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –ª–∏–Ω–∏—é
    for (let x = 0; x < 3200; x += groundWidth) {
      const ground = this.platforms.create(
        x + groundWidth / 2, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ X
        GAME_CONFIG.HEIGHT - groundHeight / 2, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ Y
        "ground"
      );
      ground.setScale(1).refreshBody();
    }

    // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Ä–æ–≤–Ω—è
    this.createLevelPlatforms();
  }

  private createLevelPlatforms(): void {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç—É—Ä—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å fallback
    const platformTexture = this.textures.get("platform");
    const platformWidth = platformTexture?.source?.[0]?.width || 64;
    const platformHeight = platformTexture?.source?.[0]?.height || 32;

    // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ —Å—Ç–∏–ª–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ BK
    const platformData = [
      { x: 200, y: 600, width: 128, height: 32 },
      { x: 400, y: 500, width: 96, height: 32 },
      { x: 650, y: 400, width: 128, height: 32 },
      { x: 900, y: 350, width: 96, height: 32 },
      { x: 1200, y: 450, width: 160, height: 32 },
      { x: 1500, y: 300, width: 128, height: 32 },
      { x: 1800, y: 400, width: 96, height: 32 },
      { x: 2100, y: 250, width: 128, height: 32 },
      { x: 2400, y: 350, width: 160, height: 32 },
      { x: 2700, y: 200, width: 128, height: 32 },
    ];

    platformData.forEach((data) => {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const platform = this.platforms.create(data.x, data.y, "platform");

      // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      const scaleX = data.width / platformWidth;
      const scaleY = data.height / platformHeight;
      platform.setScale(scaleX, scaleY).refreshBody();

      // –£–±–∏—Ä–∞–µ–º —Ç–∏–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
      // platform.setTint(COLORS.BK_BROWN);
    });
  }

  private createPlayer(): void {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç—É—Ä—ã –∑–µ–º–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å fallback
    const groundTexture = this.textures.get("ground");
    const groundHeight = groundTexture?.source?.[0]?.height || 32;

    // –°–ø–∞–≤–Ω–∏–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∑–µ–º–ª–µ
    const spawnY = GAME_CONFIG.HEIGHT - groundHeight - 50; // 50px –Ω–∞–¥ –∑–µ–º–ª–µ–π

    this.player = new Player(this, 100, spawnY);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–æ–º
    this.cameras.main.startFollow(this.player);
    this.cameras.main.setBounds(0, 0, 3200, GAME_CONFIG.HEIGHT);
  }

  private createEnemies(): void {
    this.enemies = this.physics.add.group();

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç—É—Ä—ã –∑–µ–º–ª–∏ —Å fallback
    const groundTexture = this.textures.get("ground");
    const groundHeight = groundTexture?.source?.[0]?.height || 32;
    const groundY = GAME_CONFIG.HEIGHT - groundHeight - 60; // 30px –Ω–∞–¥ –∑–µ–º–ª–µ–π

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Ä–∞–≥–æ–≤ –Ω–∞ –∑–µ–º–ª–µ
    const enemyConfigs = [
      { x: 300, y: groundY, type: "burger" as const, speed: 50, health: 1 },
      { x: 800, y: groundY, type: "fries" as const, speed: 80, health: 1 },
      { x: 1300, y: groundY, type: "soda" as const, speed: 30, health: 2 },
      { x: 1700, y: groundY, type: "burger" as const, speed: 50, health: 1 },
      { x: 2200, y: groundY, type: "fries" as const, speed: 80, health: 1 },
      { x: 2800, y: groundY, type: "soda" as const, speed: 30, health: 2 },
    ];

    enemyConfigs.forEach((config) => {
      const enemy = new Enemy(this, config);
      this.enemies.add(enemy);
    });
  }

  private createPowerUps(): void {
    this.powerUps = this.physics.add.group();

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç—É—Ä—ã –∑–µ–º–ª–∏ —Å fallback
    const groundTexture = this.textures.get("ground");
    const groundHeight = groundTexture?.source?.[0]?.height || 32;
    const groundY = GAME_CONFIG.HEIGHT - groundHeight - 50; // 50px –Ω–∞–¥ –∑–µ–º–ª–µ–π

    // –ë–æ–Ω—É—Å—ã –≤ —Å—Ç–∏–ª–µ Burger King
    const powerUpData = [
      { x: 250, y: groundY, type: "crown" as const, points: 500 },
      { x: 450, y: 450, type: "onion_rings" as const, points: 300 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 700, y: 350, type: "whopper" as const, points: 1000 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 950, y: 300, type: "crown" as const, points: 500 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 1250, y: 400, type: "onion_rings" as const, points: 300 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 1550, y: 250, type: "whopper" as const, points: 1000 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 1850, y: 350, type: "crown" as const, points: 500 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 2150, y: 200, type: "onion_rings" as const, points: 300 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 2450, y: 300, type: "whopper" as const, points: 1000 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      { x: 2750, y: 150, type: "crown" as const, points: 500 }, // –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    ];

    powerUpData.forEach((data) => {
      const powerUp = new PowerUp(this, data);
      this.powerUps.add(powerUp);
    });
  }

  private createFinishLine(): void {
    // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Ñ–∏–Ω–∏—à–∞ –≤ –∫–æ–Ω—Ü–µ —É—Ä–æ–≤–Ω—è
    const finishX = 3000;

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è —Ñ–∏–Ω–∏—à–∞
    const finishLine = this.add.rectangle(
      finishX,
      0,
      10,
      GAME_CONFIG.HEIGHT,
      0xffffff
    );
    finishLine.setOrigin(0, 0);
    finishLine.setAlpha(0.8);

    // –§–ª–∞–≥ —Ñ–∏–Ω–∏—à–∞
    const flag = this.add.rectangle(
      finishX - 30,
      50,
      40,
      30,
      parseInt(COLORS.BK_YELLOW.replace("#", ""), 16)
    );
    flag.setOrigin(0, 0);

    // –¢–µ–∫—Å—Ç —Ñ–∏–Ω–∏—à–∞
    const finishText = this.add.text(finishX - 50, 100, "–§–ò–ù–ò–®", {
      fontSize: "20px",
      color: COLORS.WHITE,
      fontFamily: "Arial Black",
      stroke: COLORS.BLACK,
      strokeThickness: 2,
    });
    finishText.setOrigin(0, 0);
  }

  private createUI(): void {
    // –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const uiStyle = {
      fontSize: "24px",
      color: COLORS.WHITE,
      fontFamily: "Arial Black",
      stroke: COLORS.BLACK,
      strokeThickness: 2,
    };

    this.scoreText = this.add.text(
      20,
      20,
      `–û—á–∫–∏: ${this.gameState.score}`,
      uiStyle
    );
    this.scoreText.setScrollFactor(0);

    this.livesText = this.add.text(
      20,
      60,
      `–ñ–∏–∑–Ω–∏: ${this.gameState.lives}`,
      uiStyle
    );
    this.livesText.setScrollFactor(0);

    this.timeText = this.add.text(
      20,
      100,
      `–í—Ä–µ–º—è: ${this.gameState.time}`,
      uiStyle
    );
    this.timeText.setScrollFactor(0);

    this.levelText = this.add.text(
      GAME_CONFIG.WIDTH - 200,
      20,
      `–£—Ä–æ–≤–µ–Ω—å: ${this.gameState.level}`,
      uiStyle
    );
    this.levelText.setScrollFactor(0);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è
    this.createHealthBar();
  }

  private createHealthBar(): void {
    const healthBarBg = this.add.rectangle(
      GAME_CONFIG.WIDTH - 150,
      60,
      120,
      20,
      0x000000
    );
    healthBarBg.setScrollFactor(0);
    healthBarBg.setStrokeStyle(2, 0xffffff);

    // –ó–¥–æ—Ä–æ–≤—å–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ update()
  }

  private setupPhysics(): void {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    this.physics.add.collider(this.player, this.platforms);
    this.physics.add.collider(this.enemies, this.platforms);
    this.physics.add.collider(this.powerUps, this.platforms);

    // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å –≤—Ä–∞–≥–∞–º–∏
    this.physics.add.overlap(
      this.player,
      this.enemies,
      this.handlePlayerEnemyCollision,
      undefined,
      this
    );

    // –°–±–æ—Ä –±–æ–Ω—É—Å–æ–≤
    this.physics.add.overlap(
      this.player,
      this.powerUps,
      this.handlePowerUpCollection,
      undefined,
      this
    );
  }

  private setupCamera(): void {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
    this.cameras.main.setBounds(0, 0, 3200, GAME_CONFIG.HEIGHT);
    this.cameras.main.startFollow(this.player, true, 0.1, 0.1);
    this.cameras.main.setDeadzone(200, 100);
  }

  private setupGameTimer(): void {
    this.gameTimer = this.time.addEvent({
      delay: 1000,
      callback: this.updateGameTime,
      callbackScope: this,
      loop: true,
    });
  }

  private setupInputs(): void {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
    const pauseKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.P
    );
    pauseKey.on("down", this.togglePause, this);

    const restartKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.R
    );
    restartKey.on("down", this.restartLevel, this);
  }

  private handlePlayerEnemyCollision(player: any, enemy: any): void {
    const playerSprite = player as Player;
    const enemySprite = enemy as Enemy;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä—ã–≥–∞–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –≤—Ä–∞–≥–∞ —Å–≤–µ—Ä—Ö—É
    if (
      playerSprite.body &&
      playerSprite.body.velocity.y > 0 && // –ò–≥—Ä–æ–∫ –ø–∞–¥–∞–µ—Ç –≤–Ω–∏–∑
      playerSprite.y < enemySprite.y - 5 && // –ò–≥—Ä–æ–∫ –≤—ã—à–µ –≤—Ä–∞–≥–∞ (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 10 –¥–æ 5)
      Math.abs(playerSprite.x - enemySprite.x) < 40 // –ò–≥—Ä–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    ) {
      // –ò–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤—Ä–∞–≥–∞
      this.addScore(enemySprite.getPoints());
      enemySprite.die();
      playerSprite.setVelocityY(-300); // –û—Ç—Å–∫–æ–∫ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –≤—Ä–∞–≥–∞
    } else if (!playerSprite.getIsInvincible()) {
      // –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω
      playerSprite.takeDamage();
      this.updateLives();
    }
  }

  private handlePowerUpCollection(player: any, powerUp: any): void {
    const powerUpSprite = powerUp as PowerUp;

    if (powerUpSprite.isAlreadyCollected()) return;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    this.addScore(powerUpSprite.getPoints());

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ - –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    const effect = powerUpSprite.getEffect();
    (player as Player).activatePowerUp(effect.type);

    // –°–±–æ—Ä –±–æ–Ω—É—Å–∞
    powerUpSprite.collect();
  }

  private addScore(points: number): void {
    this.gameState.score += points;
    this.scoreText.setText(`–û—á–∫–∏: ${this.gameState.score}`);
  }

  private updateLives(): void {
    this.gameState.lives = this.player.getHealth();
    this.livesText.setText(`–ñ–∏–∑–Ω–∏: ${this.gameState.lives}`);

    if (this.gameState.lives <= 0) {
      this.gameOver();
    }
  }

  private updateGameTime(): void {
    if (this.gameState.isPaused) return;

    this.gameState.time--;
    this.timeText.setText(`–í—Ä–µ–º—è: ${this.gameState.time}`);

    if (this.gameState.time <= 0) {
      this.gameOver();
    }
  }

  private togglePause(): void {
    this.gameState.isPaused = !this.gameState.isPaused;

    if (this.gameState.isPaused) {
      this.physics.pause();
      this.scene.pause();
      this.scene.launch(SCENES.PAUSE);
    } else {
      this.physics.resume();
      this.scene.resume();
      this.scene.stop(SCENES.PAUSE);
    }
  }

  private restartLevel(): void {
    this.scene.restart();
  }

  private gameOver(): void {
    this.physics.pause();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–≤—É–∫ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    if (this.cache.audio.exists(SOUNDS.DAMAGE)) {
      this.sound.play(SOUNDS.DAMAGE, { volume: 0.8 });
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É Game Over
    this.time.delayedCall(1000, () => {
      this.scene.start(SCENES.GAME_OVER, {
        score: this.gameState.score,
        level: this.gameState.level,
      });
    });
  }

  private checkLevelComplete(): void {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (–∏–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥ –∫–æ–Ω—Ü–∞)
    if (this.player.x >= 3000) {
      this.levelComplete();
    }
  }

  private levelComplete(): void {
    this.physics.pause();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–≤—É–∫ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    if (this.cache.audio.exists(SOUNDS.VICTORY)) {
      this.sound.play(SOUNDS.VICTORY, { volume: 0.8 });
    }

    // –ë–æ–Ω—É—Å –∑–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    const timeBonus = this.gameState.time * 10;
    this.addScore(timeBonus);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –∏–ª–∏ —ç–∫—Ä–∞–Ω—É –ø–æ–±–µ–¥—ã
    this.time.delayedCall(2000, () => {
      this.scene.start(SCENES.VICTORY, {
        score: this.gameState.score,
        level: this.gameState.level,
        timeBonus: timeBonus,
      });
    });
  }

  update(): void {
    if (this.gameState.isPaused) return;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    this.player.update();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
    if (this.player.y > GAME_CONFIG.HEIGHT + 100) {
      this.player.takeDamage();
      this.player.setPosition(100, 600); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
    this.enemies.children.entries.forEach((enemy) => {
      (enemy as Enemy).update();
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    this.checkLevelComplete();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è
    this.updateHealthBar();
  }

  private updateHealthBar(): void {
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è
    const oldHealthBar = this.children.getByName("healthBar");
    if (oldHealthBar) {
      oldHealthBar.destroy();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    const health = this.player.getHealth();
    const maxHealth = 3;
    const healthWidth = (health / maxHealth) * 116;

    const healthBar = this.add.rectangle(
      GAME_CONFIG.WIDTH - 148,
      60,
      healthWidth,
      16,
      health > 1 ? 0x00ff00 : 0xff0000
    );
    healthBar.setScrollFactor(0);
    healthBar.setName("healthBar");
  }
}
