import Phaser from "phaser";
import { SCENES, COLORS, GAME_CONFIG } from "../../constants";

export class MenuScene extends Phaser.Scene {
  private startButton!: Phaser.GameObjects.Text;
  private instructionsButton!: Phaser.GameObjects.Text;
  private creditsButton!: Phaser.GameObjects.Text;
  private background!: Phaser.GameObjects.Image;
  private logo!: Phaser.GameObjects.Text;
  private subtitle!: Phaser.GameObjects.Text;

  constructor() {
    super({ key: SCENES.MENU });
  }

  create(): void {
    this.createBackground();
    this.createLogo();
    this.createMenu();
    this.createAnimations();
    this.setupInput();
  }

  private createBackground(): void {
    // –§–æ–Ω –≤ —Å—Ç–∏–ª–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ Burger King
    this.background = this.add.image(0, 0, "bk_background");
    this.background.setOrigin(0, 0);
    this.background.setDisplaySize(GAME_CONFIG.WIDTH, GAME_CONFIG.HEIGHT);
    this.background.setAlpha(0.8);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    const overlay = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      GAME_CONFIG.WIDTH,
      GAME_CONFIG.HEIGHT,
      0x000000,
      0.4
    );
  }

  private createLogo(): void {
    // –ì–ª–∞–≤–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –∏–≥—Ä—ã
    this.logo = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      150,
      "SUPER MARIO WHOPPER",
      {
        fontSize: "64px",
        color: COLORS.BK_YELLOW,
        fontFamily: "Arial Black",
        stroke: COLORS.BLACK,
        strokeThickness: 6,
      }
    );
    this.logo.setOrigin(0.5);

    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.subtitle = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      220,
      "–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä –≤ —Å—Ç–∏–ª–µ Burger King",
      {
        fontSize: "24px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
        stroke: COLORS.BLACK,
        strokeThickness: 2,
      }
    );
    this.subtitle.setOrigin(0.5);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ–Ω—É –Ω–∞–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º
    const crown = this.add.text(GAME_CONFIG.WIDTH / 2, 100, "üëë", {
      fontSize: "48px",
    });
    crown.setOrigin(0.5);
  }

  private createMenu(): void {
    const buttonStyle = {
      fontSize: "32px",
      color: COLORS.WHITE,
      fontFamily: "Arial Bold",
      backgroundColor: COLORS.BK_RED,
      padding: { x: 20, y: 10 },
      stroke: COLORS.BLACK,
      strokeThickness: 2,
    };

    const hoverStyle = {
      fontSize: "32px",
      color: COLORS.BK_YELLOW,
      fontFamily: "Arial Bold",
      backgroundColor: COLORS.BK_BROWN,
      padding: { x: 20, y: 10 },
      stroke: COLORS.BLACK,
      strokeThickness: 2,
    };

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    this.startButton = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      350,
      "–ù–ê–ß–ê–¢–¨ –ò–ì–†–£",
      buttonStyle
    );
    this.startButton.setOrigin(0.5);
    this.startButton.setInteractive({ useHandCursor: true });

    // –ö–Ω–æ–ø–∫–∞ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
    this.instructionsButton = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      420,
      "–ò–ù–°–¢–†–£–ö–¶–ò–ò",
      buttonStyle
    );
    this.instructionsButton.setOrigin(0.5);
    this.instructionsButton.setInteractive({ useHandCursor: true });

    // –ö–Ω–æ–ø–∫–∞ "–ê–≤—Ç–æ—Ä—ã"
    this.creditsButton = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      490,
      "–ê–í–¢–û–†–´",
      buttonStyle
    );
    this.creditsButton.setOrigin(0.5);
    this.creditsButton.setInteractive({ useHandCursor: true });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫
    this.setupButtonEvents(this.startButton, hoverStyle, buttonStyle, () =>
      this.startGame()
    );
    this.setupButtonEvents(
      this.instructionsButton,
      hoverStyle,
      buttonStyle,
      () => this.showInstructions()
    );
    this.setupButtonEvents(this.creditsButton, hoverStyle, buttonStyle, () =>
      this.showCredits()
    );

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
    const controlsText = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT - 100,
      "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ‚Üê ‚Üí –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è, ‚Üë –∏–ª–∏ –ü–†–û–ë–ï–õ –¥–ª—è –ø—Ä—ã–∂–∫–∞, P –¥–ª—è –ø–∞—É–∑—ã",
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
        stroke: COLORS.BLACK,
        strokeThickness: 1,
      }
    );
    controlsText.setOrigin(0.5);

    // –í–µ—Ä—Å–∏—è –∏–≥—Ä—ã
    const versionText = this.add.text(
      GAME_CONFIG.WIDTH - 20,
      GAME_CONFIG.HEIGHT - 20,
      "v1.0.0",
      {
        fontSize: "14px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
      }
    );
    versionText.setOrigin(1);
    versionText.setAlpha(0.7);
  }

  private setupButtonEvents(
    button: Phaser.GameObjects.Text,
    hoverStyle: any,
    normalStyle: any,
    callback: () => void
  ): void {
    button.on("pointerover", () => {
      button.setStyle(hoverStyle);
      this.tweens.add({
        targets: button,
        scaleX: 1.1,
        scaleY: 1.1,
        duration: 100,
        ease: "Power2",
      });
    });

    button.on("pointerout", () => {
      button.setStyle(normalStyle);
      this.tweens.add({
        targets: button,
        scaleX: 1,
        scaleY: 1,
        duration: 100,
        ease: "Power2",
      });
    });

    button.on("pointerdown", () => {
      this.tweens.add({
        targets: button,
        scaleX: 0.95,
        scaleY: 0.95,
        duration: 50,
        yoyo: true,
        ease: "Power2",
        onComplete: callback,
      });
    });
  }

  private createAnimations(): void {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
    this.tweens.add({
      targets: this.logo,
      scaleX: 1.05,
      scaleY: 1.05,
      duration: 2000,
      yoyo: true,
      repeat: -1,
      ease: "Sine.easeInOut",
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
    this.tweens.add({
      targets: this.subtitle,
      alpha: 0.7,
      duration: 1500,
      yoyo: true,
      repeat: -1,
      ease: "Sine.easeInOut",
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–∏—Ö —á–∞—Å—Ç–∏—Ü –≤ —Å—Ç–∏–ª–µ BK
    this.createFloatingParticles();
  }

  private createFloatingParticles(): void {
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã –≤ –≤–∏–¥–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BK
    const particles = ["üçî", "üçü", "ü•§", "üëë"];

    for (let i = 0; i < 10; i++) {
      const particle = this.add.text(
        Phaser.Math.Between(0, GAME_CONFIG.WIDTH),
        Phaser.Math.Between(0, GAME_CONFIG.HEIGHT),
        Phaser.Utils.Array.GetRandom(particles),
        { fontSize: "24px" }
      );
      particle.setAlpha(0.3);

      this.tweens.add({
        targets: particle,
        y: particle.y - 100,
        x: particle.x + Phaser.Math.Between(-50, 50),
        alpha: 0,
        duration: Phaser.Math.Between(3000, 6000),
        delay: Phaser.Math.Between(0, 2000),
        repeat: -1,
        onRepeat: () => {
          particle.setPosition(
            Phaser.Math.Between(0, GAME_CONFIG.WIDTH),
            GAME_CONFIG.HEIGHT + 50
          );
          particle.setAlpha(0.3);
        },
      });
    }
  }

  private setupInput(): void {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const enterKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.ENTER
    );
    enterKey.on("down", () => this.startGame());

    const escKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.ESC
    );
    escKey.on("down", () => this.showCredits());

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫
    const upKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.UP
    );
    const downKey = this.input.keyboard!.addKey(
      Phaser.Input.Keyboard.KeyCodes.DOWN
    );

    let selectedButton = 0;
    const buttons = [
      this.startButton,
      this.instructionsButton,
      this.creditsButton,
    ];

    upKey.on("down", () => {
      selectedButton = (selectedButton - 1 + buttons.length) % buttons.length;
      this.highlightButton(buttons, selectedButton);
    });

    downKey.on("down", () => {
      selectedButton = (selectedButton + 1) % buttons.length;
      this.highlightButton(buttons, selectedButton);
    });
  }

  private highlightButton(
    buttons: Phaser.GameObjects.Text[],
    selectedIndex: number
  ): void {
    buttons.forEach((button, index) => {
      if (index === selectedIndex) {
        button.setTint(0xffff00); // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.tweens.add({
          targets: button,
          scaleX: 1.1,
          scaleY: 1.1,
          duration: 100,
        });
      } else {
        button.clearTint();
        this.tweens.add({
          targets: button,
          scaleX: 1,
          scaleY: 1,
          duration: 100,
        });
      }
    });
  }

  private startGame(): void {
    // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
    this.cameras.main.fadeOut(500, 0, 0, 0);
    this.cameras.main.once("camerafadeoutcomplete", () => {
      this.scene.start(SCENES.GAME);
    });
  }

  private showInstructions(): void {
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const modal = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      600,
      400,
      0x000000,
      0.9
    );
    modal.setStrokeStyle(4, parseInt(COLORS.BK_YELLOW.replace("#", ""), 16));

    const instructionsText = `
–ò–ù–°–¢–†–£–ö–¶–ò–ò

–¶–µ–ª—å: –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å, —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã –∏ –∏–∑–±–µ–≥–∞—è –≤—Ä–∞–≥–æ–≤

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Üê ‚Üí - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
‚Üë –∏–ª–∏ –ü–†–û–ë–ï–õ - –ü—Ä—ã–∂–æ–∫
P - –ü–∞—É–∑–∞
R - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è

–í—Ä–∞–≥–∏:
üçî –ë—É—Ä–≥–µ—Ä - –º–µ–¥–ª–µ–Ω–Ω—ã–π, –Ω–æ –∂–∏–≤—É—á–∏–π
üçü –ö–∞—Ä—Ç–æ—à–∫–∞ - –±—ã—Å—Ç—Ä–∞—è, –º–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å
ü•§ –ì–∞–∑–∏—Ä–æ–≤–∫–∞ - —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è

–ë–æ–Ω—É—Å—ã:
üëë –ö–æ—Ä–æ–Ω–∞ - –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
üçî –í–æ–ø–ø–µ—Ä - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å
üßÖ –õ—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞ - —É—Å–∫–æ—Ä–µ–Ω–∏–µ

–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    `;

    const text = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      instructionsText,
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
        align: "center",
      }
    );
    text.setOrigin(0.5);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–µ
    const closeHandler = () => {
      modal.destroy();
      text.destroy();
      this.input.keyboard!.off("keydown", closeHandler);
    };
    this.input.keyboard!.on("keydown", closeHandler);
  }

  private showCredits(): void {
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
    const modal = this.add.rectangle(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      500,
      300,
      0x000000,
      0.9
    );
    modal.setStrokeStyle(4, parseInt(COLORS.BK_YELLOW.replace("#", ""), 16));

    const creditsText = `
SUPER MARIO WHOPPER

–°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
‚Ä¢ Phaser 3 - –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
‚Ä¢ TypeScript - —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ Next.js - –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
‚Ä¢ shadcn/ui - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ:
‚Ä¢ Super Mario Bros
‚Ä¢ Burger King

–í–µ—Ä—Å–∏—è: 1.0.0

–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    `;

    const text = this.add.text(
      GAME_CONFIG.WIDTH / 2,
      GAME_CONFIG.HEIGHT / 2,
      creditsText,
      {
        fontSize: "16px",
        color: COLORS.WHITE,
        fontFamily: "Arial",
        align: "center",
      }
    );
    text.setOrigin(0.5);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–µ
    const closeHandler = () => {
      modal.destroy();
      text.destroy();
      this.input.keyboard!.off("keydown", closeHandler);
    };
    this.input.keyboard!.on("keydown", closeHandler);
  }
}
